"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([[341],{3426:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>m,default:()=>l,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var a=n(7462),i=(n(7294),n(3905)),r=n(814);const o={title:"Time"},m=void 0,d={unversionedId:"time",id:"time",title:"Time",description:"Following example uses dateandtime and cup_time to find current date and",source:"@site/docs/time.mdx",sourceDirName:".",slug:"/time",permalink:"/fortran/time",draft:!1,editUrl:"https://github.com/pranabdas/fortran/blob/main/docs/time.mdx",tags:[],version:"current",frontMatter:{title:"Time"},sidebar:"docs",previous:{title:"Monte Carlo integration",permalink:"/fortran/monte-carlo-integration"},next:{title:"Argument parsing",permalink:"/fortran/arg-parsing"}},s={},p=[],c={toc:p};function l(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Following example uses ",(0,i.kt)("inlineCode",{parentName:"p"},"date_and_time")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cup_time")," to find current date and\ntime, and determine program execution time."),(0,i.kt)(r.Z,{language:"fortran",title:"src/25_time.f90",showLineNumbers:!0,mdxType:"CodeBlock"},'PROGRAM MAIN\n    IMPLICIT NONE\n    INTEGER, PARAMETER :: n = 10000000\n    CHARACTER(LEN=8) :: date\n    REAL start_time, end_time\n    REAL(KIND=KIND(1.0D0)) :: test = 0.0D0\n    INTEGER i\n\n    CALL date_and_time(date=date)\n    PRINT *, "Timing report dated: ", date(1:4), "-", date(5:6), "-", date(7:8)\n\n    CALL cpu_time(start_time)\n\n    ! savage benchmark\n    DO i = 1, n\n        test = tan(atan(exp(log(sqrt(test * test))))) + 1.0D0;\n    END DO\n\n    CALL cpu_time(end_time)\n\n    PRINT *, "Time taken = ", end_time - start_time, "sec."\n    PRINT *, "Test = ", test\n    PRINT *, "Relative accuracy = ", (test - (n + 1)) / (n + 1)\nEND\n\n! Sample output:\n! Timing report dated: 2022-10-09\n! Time taken =   0.939146996     sec.\n! Test =    9999816.5167837571     \n! Relative accuracy =   -1.8448319779454493E-005\n'))}l.isMDXComponent=!0}}]);