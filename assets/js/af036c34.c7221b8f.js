"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([[6],{2289:function(a,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return N}});var t=n(7462),s=n(3366),r=(n(7294),n(3905)),m=n(5710),p=["components"],l={title:"Procedures"},o=void 0,i={unversionedId:"procedures",id:"procedures",title:"Procedures",description:"There are two types of procedures in Fortran: subroutines and functions. All",source:"@site/docs/procedures.mdx",sourceDirName:".",slug:"/procedures",permalink:"/fortran/procedures",draft:!1,editUrl:"https://github.com/pranabdas/fortran/blob/main/docs/procedures.mdx",tags:[],version:"current",frontMatter:{title:"Procedures"},sidebar:"docs",previous:{title:"Modules",permalink:"/fortran/modules"},next:{title:"Coding practice",permalink:"/fortran/category/coding-practice"}},c={},N=[{value:"Subroutine",id:"subroutine",level:2},{value:"Function",id:"function",level:2},{value:"Pure procedures and side effects",id:"pure-procedures-and-side-effects",level:2},{value:"Interface blocks",id:"interface-blocks",level:2}],u={toc:N};function d(a){var e=a.components,n=(0,s.Z)(a,p);return(0,r.kt)("wrapper",(0,t.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"There are two types of procedures in Fortran: subroutines and functions. All\nprocedures should be placed in a module or after the ",(0,r.kt)("inlineCode",{parentName:"p"},"contains")," keyword in a\nmain program."),(0,r.kt)("h2",{id:"subroutine"},"Subroutine"),(0,r.kt)("p",null,"First we write the subroutines in a module:"),(0,r.kt)(m.Z,{language:"fortran",title:"src/12_add_module.f90",showLineNumbers:!0,mdxType:"CodeBlock"},'MODULE add_module\n  IMPLICIT none\n  PRIVATE\n\n  REAL :: input1, input2, total\n\n  PUBLIC :: read_inputs, add_numbers, print_result\n\n  CONTAINS\n\n  SUBROUTINE read_inputs()\n    PRINT "(a,$)", "Input1 = "\n    READ *, input1\n\n    PRINT "(a,$)", "Input2 = "\n    READ *, input2\n  END SUBROUTINE read_inputs\n\n  SUBROUTINE add_numbers()\n    total = input1 + input2\n  END SUBROUTINE add_numbers\n\n  SUBROUTINE print_result\n    PRINT *, input1, " + ", input2, " = ", total\n  END SUBROUTINE print_result\nEND MODULE add_module\n'),(0,r.kt)("p",null,"Now write our program:"),(0,r.kt)(m.Z,{language:"fortran",title:"src/12_add.f90",showLineNumbers:!0,mdxType:"CodeBlock"},"PROGRAM add\n  USE add_module\n  IMPLICIT none\n\n  CALL read_inputs()\n  CALL add_numbers()\n  CALL print_result()\nEND PROGRAM add\n"),(0,r.kt)("p",null,"Compile and execute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gfortran -c 12_add_module.f90\ngfortran 12_add.f90 12_add_module.o\n./a.out\n")),(0,r.kt)("h2",{id:"function"},"Function"),(0,r.kt)("p",null,"We want to print a table of ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"x")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x")))))," vs ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f(x)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))," where:"),(0,r.kt)("div",{className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mrow",{parentName:"msup"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"("),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow"},"+"),(0,r.kt)("mfrac",{parentName:"mrow"},(0,r.kt)("mn",{parentName:"mfrac"},"1"),(0,r.kt)("mi",{parentName:"mfrac"},"x")),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},")")),(0,r.kt)("mi",{parentName:"msup"},"x"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f(x) = \\left(1 + \\frac{1}{x}\\right)^x")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"2.4543em",verticalAlign:"-0.95em"}}),(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},(0,r.kt)("span",{parentName:"span",className:"delimsizing size3"},"(")),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mopen nulldelimiter"}),(0,r.kt)("span",{parentName:"span",className:"mfrac"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.3214em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.314em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.23em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),(0,r.kt)("span",{parentName:"span",style:{top:"-3.677em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.686em"}},(0,r.kt)("span",{parentName:"span"}))))),(0,r.kt)("span",{parentName:"span",className:"mclose nulldelimiter"})),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},(0,r.kt)("span",{parentName:"span",className:"delimsizing size3"},")"))),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.5043em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.9029em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"x"))))))))))))),(0,r.kt)(m.Z,{language:"fortran",title:"src/13_function_module.f90",showLineNumbers:!0,mdxType:"CodeBlock"},"MODULE function_module\n  IMPLICIT NONE\n  PRIVATE\n\n  INTEGER, PARAMETER, PUBLIC :: power = 5\n  PUBLIC :: f\n\n  CONTAINS\n\n  FUNCTION f(x) RESULT(f_result)\n    REAL, INTENT(IN) :: x\n    REAL :: f_result\n\n! SELECTED_REAL_KIND(precision [, range])\n    INTEGER, PARAMETER :: kind_needed = selected_real_kind(power + 1)\n\n    f_result = (1 + 1 / REAL(x, kind_needed)) ** x\n  END FUNCTION f\nEND MODULE function_module\n"),(0,r.kt)(m.Z,{language:"fortran",title:"src/13_function_table.f90",showLineNumbers:!0,mdxType:"CodeBlock"},'PROGRAM function_table\n\n  USE function_module\n  IMPLICIT NONE\n  REAL :: x\n  INTEGER :: i\n\n  DO i = 0, power\n    x = 10**i\n    PRINT "(f8.1, f8.4)", x, f(x)\n  END DO\nEND PROGRAM function_table\n'),(0,r.kt)("p",null,"Sample output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-fortran"},"     1.0  2.0000\n    10.0  2.5937\n   100.0  2.7048\n  1000.0  2.7171\n 10000.0  2.7186\n100000.0  2.7220\n")),(0,r.kt)("p",null,"In contrast to subroutines, functions must provide a return value."),(0,r.kt)("h2",{id:"pure-procedures-and-side-effects"},"Pure procedures and side effects"),(0,r.kt)("p",null,"Side effects are the change in status of a program when a procedure is executed\nother than computing a value to return, such as changing a variable declared in\nthe program or module above the ",(0,r.kt)("inlineCode",{parentName:"p"},"contains")," statement."),(0,r.kt)("p",null,"One can indicate whether a function or subroutine is pure or has side effects by\nusing the keywords ",(0,r.kt)("inlineCode",{parentName:"p"},"pure")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"impure"),", respectively."),(0,r.kt)("h2",{id:"interface-blocks"},"Interface blocks"),(0,r.kt)("p",null,"Interface block is used to provide necessary information to the calling program\nwhether the call is correct. It basically consists of the procedure without the\nexecutable code, and declaration of local variables."))}d.isMDXComponent=!0}}]);