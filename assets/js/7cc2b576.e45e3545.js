"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([[316],{970:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>N,frontMatter:()=>m,metadata:()=>i,toc:()=>o});var t=n(7462),s=(n(7294),n(3905)),r=n(814);const m={title:"Basic Linear Algebra Subroutine",sidebar_label:"BLAS"},l=void 0,i={unversionedId:"blas",id:"blas",title:"Basic Linear Algebra Subroutine",description:"Install BLAS and [LAPACK](",source:"@site/docs/blas.mdx",sourceDirName:".",slug:"/blas",permalink:"/fortran/blas",draft:!1,editUrl:"https://github.com/pranabdas/fortran/blob/main/docs/blas.mdx",tags:[],version:"current",frontMatter:{title:"Basic Linear Algebra Subroutine",sidebar_label:"BLAS"},sidebar:"docs",previous:{title:"Monte Carlo integration",permalink:"/fortran/monte-carlo-integration"},next:{title:"Resources",permalink:"/fortran/resources"}},p={},o=[{value:"Scaler product (<code>SDOT</code>)",id:"scaler-product-sdot",level:2},{value:"Matrix multiplication (<code>DGEMM</code>)",id:"matrix-multiplication-dgemm",level:2},{value:"Resources",id:"resources",level:2}],c={toc:o};function N(a){let{components:e,...m}=a;return(0,s.kt)("wrapper",(0,t.Z)({},c,m,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Install ",(0,s.kt)("a",{parentName:"p",href:"https://netlib.org/blas/"},"BLAS")," and ",(0,s.kt)("a",{parentName:"p",href:"https://netlib.org/lapack/"},"LAPACK")," libraries:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"apt install blaslib-dev lapacklib-dev\n\n# compile program\ngfortran filename.f90 -lblas\n\n# in case libs are not in system path\ngfortran filename.f90 -L/usr/lib -lblas\n")),(0,s.kt)("h2",{id:"scaler-product-sdot"},"Scaler product (",(0,s.kt)("inlineCode",{parentName:"h2"},"SDOT"),")"),(0,s.kt)(r.Z,{language:"fortran",title:"src/22_blas_sdot.f90",showLineNumbers:!0,mdxType:"CodeBlock"},'! SDOT: This function performs a vector-vector operation of computing a scalar\n! product of two single-precision real vectors x and y.\n! https://netlib.org/blas/#_level_1\n! Compile: gfortran filename.f90 -lblas\n! If BLAS is not in system path: gfortran filename.f90 -L/usr/lib -lblas\nPROGRAM MAIN\n    IMPLICIT NONE\n\n    INTEGER :: n = 3 ! length of vectors\n    REAL, DIMENSION(:), ALLOCATABLE :: x\n    REAL, DIMENSION(:), ALLOCATABLE :: y\n    INTEGER :: incx = 1, incy = 1 \n    \n    ! incx and incy can be used to manipulate data when both x and y are stored\n    ! in the same array. See the alternate array z\n    REAL z(6)\n    INTEGER :: incxz= 2, incyz = 1\n\n    REAL res, SDOT\n\n    EXTERNAL SDOT\n\n    ALLOCATE(x(n))\n    ALLOCATE(y(n))\n\n    x(1) = 2.0\n    x(2) = 1.0\n    x(3) = 0.0\n\n    y(1) = 1.0\n    y(2) = 3.0\n    y(3) = 5.0\n\n    z(1) = x(1)\n    z(2) = y(1)\n    z(3) = x(2)\n    z(4) = y(2)\n    z(5) = x(3)\n    z(6) = y(3)\n\n    res = SDOT(n, x, incx, y, incy)\n\n    PRINT *, "Result = ", res\n    PRINT *, "Alt. result = ", SDOT(n, z, incxz, z, incyz)\n\n    DEALLOCATE(x)\n    DEALLOCATE(y)\nEND\n'),(0,s.kt)("h2",{id:"matrix-multiplication-dgemm"},"Matrix multiplication (",(0,s.kt)("inlineCode",{parentName:"h2"},"DGEMM"),")"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"DGEMM")," calculates the product of double precision matrices:"),(0,s.kt)("div",{className:"math math-display"},(0,s.kt)("span",{parentName:"div",className:"katex-display"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"C"),(0,s.kt)("mo",{parentName:"mrow"},"\u21d0"),(0,s.kt)("mi",{parentName:"mrow"},"\u03b1"),(0,s.kt)("mi",{parentName:"mrow"},"A"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mi",{parentName:"mrow"},"B"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"\u03b2"),(0,s.kt)("mi",{parentName:"mrow"},"C")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"C \\Leftarrow \\alpha A \\ast B + \\beta C")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u21d0"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.0037em"}},"\u03b1"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7667em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05017em"}},"B"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"\u03b2C")))))),(0,s.kt)(r.Z,{language:"fortran",title:"src/22_blas_dgemm.f90",showLineNumbers:!0,mdxType:"CodeBlock"},'PROGRAM MAIN\n    IMPLICIT NONE\n\n    DOUBLE PRECISION ALPHA, BETA\n    INTEGER M, K, N, I, J\n    PARAMETER (M=2, K=3, N=2)\n    DOUBLE PRECISION A(M,K), B(K,N), C(M,N)\n\n    ALPHA = 1.0 \n    BETA = 0.0\n\n    ! initialize matrices\n    A(1,1) = 2.0\n    A(1,2) = 3.0\n    A(1,3) = 9.0\n    A(2,1) = 0.0\n    A(2,2) = 4.0\n    A(2,3) = 1.0\n\n    B(1,1) = 4.0\n    B(1,2) = 1.0\n    B(2,1) = 4.0\n    B(2,2) = 5.0\n    B(3,1) = 9.0\n    B(3,2) = 6.0\n\n    ! optionally initialize C matrix with zeros\n    DO I = 1, M\n        DO J = 1, N\n          C(I,J) = 0.0\n        END DO\n    END DO\n\n    CALL DGEMM(\'N\',\'N\', M, N, K, ALPHA, A, M, B, K, BETA, C, M)\n\n    ! print matrix c\n    DO I = 1, M\n        DO J = 1, N\n          PRINT *, "C(", I, ",", J, ") =", C(I,J)\n        END DO\n    END DO\n\nEND\n'),(0,s.kt)("h2",{id:"resources"},"Resources"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{target:"_blank",href:n(9118).Z},"Multiplying matrices: Intel MKL example"))))}N.isMDXComponent=!0},9118:(a,e,n)=>{n.d(e,{Z:()=>t});const t=n.p+"assets/files/multiplying-matrices-using-dgemm-6c99ea4e8226a855b9f4b33648655517.pdf"}}]);