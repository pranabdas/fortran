"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([["567"],{3001:function(e,t,i){i.r(t),i.d(t,{default:()=>c,frontMatter:()=>o,metadata:()=>n,assets:()=>d,toc:()=>f,contentTitle:()=>s});var n=JSON.parse('{"id":"file","title":"File Input / Output","description":"Here we will generate some data and write it to a file:","source":"@site/docs/file.mdx","sourceDirName":".","slug":"/file","permalink":"/fortran/file","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/fortran/blob/main/docs/file.mdx","tags":[],"version":"current","frontMatter":{"title":"File Input / Output","sidebar_label":"File I/O"},"sidebar":"docs","previous":{"title":"Pointer","permalink":"/fortran/pointer"},"next":{"title":"Coding practice","permalink":"/fortran/category/coding-practice"}}'),r=i("5893"),a=i("65"),l=i("5056");let o={title:"File Input / Output",sidebar_label:"File I/O"},s=void 0,d={},f=[];function u(e){let t={admonition:"admonition",code:"code",p:"p",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Here we will generate some data and write it to a file:"}),"\n","\n",(0,r.jsx)(l.Z,{language:"fortran",title:"src/08_file_write.f90",showLineNumbers:!0,children:"! Program : Write output to a file\n\nPROGRAM file_write\n  IMPLICIT NONE\n\n  INTEGER :: ii\n\n  OPEN(unit=1, file='output.dat', status='new')\n    DO ii = 1, 10\n      WRITE(1, '(i4)') ii*ii\n    ENDDO\n  CLOSE(unit=1)\nEND PROGRAM file_write\n"}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["Note that ",(0,r.jsx)(t.code,{children:"unit=0, 5, and 6"})," are reserved. Do not use them to identify files in\nyour programs."]})}),"\n",(0,r.jsx)(t.p,{children:"Reading from file: we will read the data from file that is generated in the\nabove example."}),"\n","\n",(0,r.jsx)(l.Z,{language:"fortran",title:"src/09_file_read.f90",showLineNumbers:!0,children:"! Program : Read data from file\n\nPROGRAM file_read\n  IMPLICIT NONE\n\n  INTEGER :: ii, data(10)\n\n  OPEN(unit=1, file='output.dat', status='old')\n    DO ii = 1, 10\n      READ(1, '(i4)') data(ii)\n    END DO\n  CLOSE(unit=1)\n\n  DO ii = 1, 10\n    PRINT '(i3)', data(ii)\n  END DO\nEND PROGRAM file_read\n"})]})}function c(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);