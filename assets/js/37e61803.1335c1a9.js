"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([["844"],{6252:function(n,e,r){r.r(e),r.d(e,{frontMatter:()=>l,default:()=>u,toc:()=>d,metadata:()=>o,assets:()=>c,contentTitle:()=>s});var o=JSON.parse('{"id":"loop","title":"Loop","description":"DO Loop","source":"@site/docs/loop.mdx","sourceDirName":".","slug":"/loop","permalink":"/fortran/loop","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/fortran/blob/main/docs/loop.mdx","tags":[],"version":"current","frontMatter":{"title":"Loop"},"sidebar":"docs","previous":{"title":"Logical control","permalink":"/fortran/control"},"next":{"title":"Modules","permalink":"/fortran/modules"}}'),i=r(5893),t=r(65),a=r(2834);let l={title:"Loop"},s=void 0,c={},d=[{value:"DO Loop",id:"do-loop",level:2},{value:"DO WHILE",id:"do-while",level:2}];function p(n){let e={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"do-loop",children:"DO Loop"}),"\n",(0,i.jsx)(e.p,{children:"Calculate factorial:"}),"\n","\n",(0,i.jsx)(a.Z,{language:"fortran",title:"src/07_factorial.f90",showLineNumbers:!0,children:'! Program : Find factorial\n\nPROGRAM factorial\n  IMPLICIT NONE\n\n  INTEGER :: input, ii, output = 1\n\n  PRINT *, "Input = "\n  READ *, input\n\n  DO ii = 1, input\n    output = output * ii\n  ENDDO\n\n  PRINT *, input, "! = ", output\nEND PROGRAM factorial\n'}),"\n",(0,i.jsx)(e.p,{children:"We can have a step size in a DO loop with a third parameter:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"DO i = 1, 100, 10\n  ! do something\nEND DO\n"})}),"\n",(0,i.jsx)(e.p,{children:"Exit a loop based on condition:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"DO i = 1, 10\n  CALL random_number(x)\n  IF (x > 0.5) EXIT\nEND DO\n"})}),"\n",(0,i.jsx)(e.p,{children:"Skip rest of current iteration with cycle:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"DO i = 1, 10\n  IF (iseven(i)) CYCLE\n  ! do something with the odd numbers\nEND DO\n"})}),"\n",(0,i.jsx)(e.p,{children:"Implied DO loops:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"PRINT *, (i, i = 1, 10)\n"})}),"\n",(0,i.jsx)(e.p,{children:"You can iterate multiple expressions:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"PRINT *, (i, i**2, i = 0, 10)\n"})}),"\n",(0,i.jsx)(e.p,{children:"With nested loops:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"PRINT *, ((i*j, i = 1, 10), j = 1, 10)\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"DO concurrent:"})," if the iterations of a DO loop are independent, we can use the\nCONCURRENT keyword to indicate, the loop can be iterated in parallel:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"DO CONCURRENT (i = 1, 10)\n  ! do something\nEND DO\n"})}),"\n",(0,i.jsx)(e.h2,{id:"do-while",children:"DO WHILE"}),"\n","\n",(0,i.jsx)(a.Z,{language:"fortran",title:"src/07_print_even_numbers.f90",showLineNumbers:!0,children:"PROGRAM even_numbers\n  IMPLICIT NONE\n\n  INTEGER :: num\n  num = 1\n\n  DO WHILE (num <= 10)\n    IF (MODULO(num, 2) == 0) THEN\n      PRINT *, num\n    END IF\n    num = num + 1\n  END DO\nEND PROGRAM even_numbers\n"})]})}function u(n={}){let{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}}}]);