"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([[294],{2563:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>m,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"monte-carlo-pi","title":"Determine value of pi by Monte Carlo method","description":"We will approximate value of $\\\\pi$ by Monte Carlo method. We will generate","source":"@site/docs/monte-carlo-pi.mdx","sourceDirName":".","slug":"/monte-carlo-pi","permalink":"/fortran/monte-carlo-pi","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/fortran/blob/main/docs/monte-carlo-pi.mdx","tags":[],"version":"current","frontMatter":{"title":"Determine value of pi by Monte Carlo method","sidebar_label":"Monte Carlo method"},"sidebar":"docs","previous":{"title":"Inner product","permalink":"/fortran/inner-product"},"next":{"title":"Monte Carlo integration","permalink":"/fortran/monte-carlo-integration"}}');var s=a(4848),r=a(8453),i=a(1432);const o='PROGRAM pi\n    IMPLICIT NONE\n    \n    INTEGER, PARAMETER :: iteration = 1000000\n    REAL :: x, y\n    REAL :: x_lo = -1.0\n    REAL :: x_hi = 1.0\n    REAL :: y_lo = -1.0\n    REAL :: y_hi = 1.0\n    INTEGER :: i, monte_area = 0\n\n    DO i = 1, iteration\n        CALL random_number(x)\n        CALL random_number(y)\n\n        x = x_lo + x * (x_hi - x_lo);\n        y = y_lo + y * (y_hi - y_lo);\n\n        IF (x * x + y * y < 1) THEN\n            monte_area = monte_area + 1;\n        END IF\n    END DO\n\n    PRINT *, "pi = ", 4.0 * monte_area / iteration\n\n    PRINT *, "relative error = ", abs(1.0 * monte_area / iteration &\n            - ATAN(1.0D0)) / ATAN(1.0D0)\n\nEND PROGRAM pi\n',l={title:"Determine value of pi by Monte Carlo method",sidebar_label:"Monte Carlo method"},m=void 0,c={},h=[];function d(e){const n={annotation:"annotation",math:"math",mi:"mi",mrow:"mrow",p:"p",semantics:"semantics",span:"span",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["We will approximate value of ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mi,{children:"\u03c0"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\pi"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03c0"})]})})]})," by Monte Carlo method. We will generate\nrandom number in a square of radius 2 unit; x = (-1, 1) and y = (-1, 1). We will\ncount how many points are inside the circle of radius 1 unit. Area of the square\n= 4 square unit, while the are of circle is ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mi,{children:"\u03c0"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\pi"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03c0"})]})})]})," (unit radius circle). Use this\nratio to approximate the value of ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mi,{children:"\u03c0"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\pi"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03c0"})]})})]}),"."]}),"\n","\n",(0,s.jsx)(i.A,{language:"fortran",title:"src/20_monte_carlo_pi.f90",showLineNumbers:!0,children:o})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);