"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([["241"],{6565:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>s,toc:()=>u,default:()=>p,metadata:()=>t,assets:()=>d,contentTitle:()=>o});var t=JSON.parse('{"id":"file-io","title":"File Input/Output","description":"Here we will generate some data and write it to a file:","source":"@site/docs/11-file-io.mdx","sourceDirName":".","slug":"/file-io","permalink":"/fortran/file-io","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/fortran/blob/main/docs/11-file-io.mdx","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"File Input/Output","sidebar_label":"File I/O","keywords":["namelist","fortran namelist","file I/O","file read write","file input output"]},"sidebar":"docs","previous":{"title":"Pointer","permalink":"/fortran/pointer"},"next":{"title":"Coding practice","permalink":"/fortran/category/coding-practice"}}'),r=i(4848),a=i(4429),l=i(464);let s={title:"File Input/Output",sidebar_label:"File I/O",keywords:["namelist","fortran namelist","file I/O","file read write","file input output"]},o,d={},u=[{value:"FORTRAN Namelist",id:"fortran-namelist",level:2},{value:"Namelist example",id:"namelist-example",level:3}];function c(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Here we will generate some data and write it to a file:"}),"\n","\n",(0,r.jsx)(l.A,{language:"fortran",title:"src/08_file_write.f90",showLineNumbers:!0,children:"! Program : Write output to a file\n\nPROGRAM file_write\n  IMPLICIT NONE\n\n  INTEGER :: ii\n\n  OPEN(unit=10, file='output.dat', status='new')\n    DO ii = 1, 10\n      WRITE(1, '(i4)') ii*ii\n    ENDDO\n  CLOSE(unit=10)\nEND PROGRAM file_write\n"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Note that ",(0,r.jsx)(n.code,{children:"unit=0"}),", ",(0,r.jsx)(n.code,{children:"5"}),", and ",(0,r.jsx)(n.code,{children:"6"})," are reserved. Do not use them to identify files\nin your programs. Some older compilers might other other low unit numbers for\ninternal usage. It is safer and conventional to use unit number 10 and above for\nuser files."]})}),"\n",(0,r.jsx)(n.p,{children:"Reading from file: we will read the data from file that is generated in the\nabove example."}),"\n","\n",(0,r.jsx)(l.A,{language:"fortran",title:"src/09_file_read.f90",showLineNumbers:!0,children:"! Program : Read data from file\n\nPROGRAM file_read\n  IMPLICIT NONE\n\n  INTEGER :: ii, data(10)\n\n  OPEN(unit=10, file='output.dat', status='old')\n    DO ii = 1, 10\n      READ(1, '(i4)') data(ii)\n    END DO\n  CLOSE(unit=10)\n\n  DO ii = 1, 10\n    PRINT '(i3)', data(ii)\n  END DO\nEND PROGRAM file_read\n"}),"\n",(0,r.jsx)(n.h2,{id:"fortran-namelist",children:"FORTRAN Namelist"}),"\n",(0,r.jsx)(n.p,{children:"FORTRAN Namelist provides an easy way to read and write groups of variables.\nNamelists simplify reading and writing variables to files without needing to\nspecify variable formats for each I/O operation. The namelist group is defined\nin the Fortran code, and the corresponding input/output text uses a specific\nformat:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Begins with ",(0,r.jsx)(n.code,{children:"&groupname"})]}),"\n",(0,r.jsx)(n.li,{children:"Lists variable assignments (comma or space separated)"}),"\n",(0,r.jsxs)(n.li,{children:["Ends with ",(0,r.jsx)(n.code,{children:"/"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"namelist-example",children:"Namelist example"}),"\n",(0,r.jsxs)(n.p,{children:["Namelists are used in ",(0,r.jsx)(n.a,{href:"https://pranabdas.github.io/espresso/hands-on/scf",children:"Quantum ESPRESSO input files"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Here is an example namelist:"}),"\n","\n",(0,r.jsx)(l.A,{language:"fortran",title:"src/30_qe.in",showLineNumbers:!0,children:"&SYSTEM\n    ibrav   = 2\n    nat     = 2\n    ntyp    = 1\n    ecutwfc = 30.0\n    ecutrho = 240.0\n/\n"}),"\n",(0,r.jsx)(n.p,{children:"We can read and parse various inputs following way:"}),"\n","\n",(0,r.jsx)(l.A,{language:"fortran",title:"src/30_namelist.f90",showLineNumbers:!0,children:'program read_qe_input\n  implicit none\n\n  ! Declare variables matching those in the QE SYSTEM namelist\n  integer :: ibrav, nat, ntyp\n  double precision :: ecutwfc, ecutrho\n  character(len=256) :: input_file\n  integer :: ios\n\n  ! Namelist definition\n  namelist /SYSTEM/ ibrav, nat, ntyp, ecutwfc, ecutrho\n\n  ! Set default values\n  ibrav = 0\n  nat = 0\n  ntyp = 0\n  ecutwfc = 0.0d0\n  ecutrho = 0.0d0\n\n  ! Set input file name\n  input_file = \'30_qe.in\'\n\n  ! Open and read the SYSTEM namelist\n  open(unit=10, file=input_file, status=\'old\', action=\'read\')\n  read(10, nml=SYSTEM, iostat=ios)\n  if (ios /= 0) then\n     print *, "Error reading SYSTEM namelist from file ", trim(input_file)\n  else\n     print *, "ibrav   =", ibrav\n     print *, "nat     =", nat\n     print *, "ntyp    =", ntyp\n     print *, "ecutwfc =", ecutwfc\n     print *, "ecutrho =", ecutrho\n  end if\n  close(10)\nend program read_qe_input\n'})]})}function p(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);