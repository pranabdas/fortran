"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([["862"],{373:function(n,e,a){a.r(e),a.d(e,{frontMatter:()=>t,toc:()=>o,default:()=>h,metadata:()=>s,assets:()=>m,contentTitle:()=>c});var s=JSON.parse('{"id":"coding-practice/blas","title":"Basic Linear Algebra Subprograms","description":"Install BLAS and [LAPACK](","source":"@site/docs/coding-practice/12-blas.mdx","sourceDirName":"coding-practice","slug":"/coding-practice/blas","permalink":"/fortran/coding-practice/blas","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/fortran/blob/main/docs/coding-practice/12-blas.mdx","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"title":"Basic Linear Algebra Subprograms","sidebar_label":"BLAS"},"sidebar":"docs","previous":{"title":"External command","permalink":"/fortran/coding-practice/exec-command"},"next":{"title":"MPI Basics","permalink":"/fortran/coding-practice/mpi"}}'),i=a(4848),l=a(4429),r=a(464);let t={title:"Basic Linear Algebra Subprograms",sidebar_label:"BLAS"},c,m={},o=[{value:"Scaler product (<code>SDOT</code>)",id:"scaler-product-sdot",level:2},{value:"Matrix multiplication (<code>DGEMM</code>)",id:"matrix-multiplication-dgemm",level:2},{value:"Resources",id:"resources",level:2}];function d(n){let e={a:"a",annotation:"annotation",code:"code",h2:"h2",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",ul:"ul",...(0,l.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["Install ",(0,i.jsx)(e.a,{href:"https://netlib.org/blas/",children:"BLAS"})," and ",(0,i.jsx)(e.a,{href:"https://netlib.org/lapack/",children:"LAPACK"})," libraries:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"apt install blaslib-dev lapacklib-dev\n\n# compile program\ngfortran filename.f90 -lblas\n\n# in case libs are not in system path\ngfortran filename.f90 -L/usr/lib -lblas\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"scaler-product-sdot",children:["Scaler product (",(0,i.jsx)(e.code,{children:"SDOT"}),")"]}),"\n","\n",(0,i.jsx)(r.A,{language:"fortran",title:"src/22_blas_sdot.f90",showLineNumbers:!0,children:'! SDOT: This function performs a vector-vector operation of computing a scalar\n! product of two single-precision real vectors x and y.\n! https://netlib.org/blas/#_level_1\n! Compile: gfortran filename.f90 -lblas\n! If BLAS is not in system path: gfortran filename.f90 -L/usr/lib -lblas\nPROGRAM MAIN\n    IMPLICIT NONE\n\n    INTEGER :: n = 3 ! length of vectors\n    REAL, DIMENSION(:), ALLOCATABLE :: x\n    REAL, DIMENSION(:), ALLOCATABLE :: y\n    INTEGER :: incx = 1, incy = 1 \n    \n    ! incx and incy can be used to manipulate data when both x and y are stored\n    ! in the same array. See the alternate array z\n    REAL z(6)\n    INTEGER :: incxz= 2, incyz = 1\n\n    REAL res, SDOT\n\n    EXTERNAL SDOT\n\n    ALLOCATE(x(n))\n    ALLOCATE(y(n))\n\n    x(1) = 2.0\n    x(2) = 1.0\n    x(3) = 0.0\n\n    y(1) = 1.0\n    y(2) = 3.0\n    y(3) = 5.0\n\n    z(1) = x(1)\n    z(2) = y(1)\n    z(3) = x(2)\n    z(4) = y(2)\n    z(5) = x(3)\n    z(6) = y(3)\n\n    res = SDOT(n, x, incx, y, incy)\n\n    PRINT *, "Result = ", res\n    PRINT *, "Alt. result = ", SDOT(n, z, incxz, z, incyz)\n\n    DEALLOCATE(x)\n    DEALLOCATE(y)\nEND\n'}),"\n",(0,i.jsxs)(e.h2,{id:"matrix-multiplication-dgemm",children:["Matrix multiplication (",(0,i.jsx)(e.code,{children:"DGEMM"}),")"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"DGEMM"})," calculates the product of double precision matrices:"]}),"\n",(0,i.jsx)(e.span,{className:"katex-display",children:(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"C"}),(0,i.jsx)(e.mo,{children:"\u21D0"}),(0,i.jsx)(e.mi,{children:"\u03B1"}),(0,i.jsx)(e.mi,{children:"A"}),(0,i.jsx)(e.mo,{children:"\u2217"}),(0,i.jsx)(e.mi,{children:"B"}),(0,i.jsx)(e.mo,{children:"+"}),(0,i.jsx)(e.mi,{children:"\u03B2"}),(0,i.jsx)(e.mi,{children:"C"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"C \\Leftarrow \\alpha A \\ast B + \\beta C"})]})})}),(0,i.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6833em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.07153em"},children:"C"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(e.span,{className:"mrel",children:"\u21D0"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6833em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.0037em"},children:"\u03B1"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"A"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(e.span,{className:"mbin",children:"\u2217"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.7667em",verticalAlign:"-0.0833em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.05017em"},children:"B"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(e.span,{className:"mbin",children:"+"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.07153em"},children:"\u03B2C"})]})]})]})}),"\n","\n",(0,i.jsx)(r.A,{language:"fortran",title:"src/22_blas_dgemm.f90",showLineNumbers:!0,children:'PROGRAM MAIN\n    IMPLICIT NONE\n\n    DOUBLE PRECISION ALPHA, BETA\n    INTEGER M, K, N, I, J\n    PARAMETER (M=2, K=3, N=2)\n    DOUBLE PRECISION A(M,K), B(K,N), C(M,N)\n\n    ALPHA = 1.0 \n    BETA = 0.0\n\n    ! initialize matrices\n    A(1,1) = 2.0\n    A(1,2) = 3.0\n    A(1,3) = 9.0\n    A(2,1) = 0.0\n    A(2,2) = 4.0\n    A(2,3) = 1.0\n\n    B(1,1) = 4.0\n    B(1,2) = 1.0\n    B(2,1) = 4.0\n    B(2,2) = 5.0\n    B(3,1) = 9.0\n    B(3,2) = 6.0\n\n    ! optionally initialize C matrix with zeros\n    DO I = 1, M\n        DO J = 1, N\n          C(I,J) = 0.0\n        END DO\n    END DO\n\n    CALL DGEMM(\'N\',\'N\', M, N, K, ALPHA, A, M, B, K, BETA, C, M)\n\n    ! print matrix C\n    DO I = 1, M\n        DO J = 1, N\n          PRINT *, "C(", I, ",", J, ") =", C(I,J)\n        END DO\n    END DO\n\nEND\n'}),"\n",(0,i.jsx)(e.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)("a",{target:"_blank",href:a(4643).A,children:" Multiplying matrices: Intel MKL example"}),"\n"]}),"\n"]})]})}function h(n={}){let{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},4643:function(n,e,a){a.d(e,{A:()=>s});let s=a.p+"assets/files/multiplying-matrices-using-dgemm-6c99ea4e8226a855b9f4b33648655517.pdf"}}]);