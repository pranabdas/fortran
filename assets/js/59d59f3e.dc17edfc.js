"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([["802"],{6005:function(e){e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","href":"/fortran/","label":"Setup","docId":"setup","unlisted":false},{"type":"link","href":"/fortran/basics","label":"Basics","docId":"basics","unlisted":false},{"type":"link","href":"/fortran/array","label":"Array and Matrix","docId":"array","unlisted":false},{"type":"link","href":"/fortran/control","label":"Logical control","docId":"control","unlisted":false},{"type":"link","href":"/fortran/loop","label":"Loop","docId":"loop","unlisted":false},{"type":"link","href":"/fortran/modules","label":"Modules","docId":"modules","unlisted":false},{"type":"link","href":"/fortran/procedures","label":"Procedures","docId":"procedures","unlisted":false},{"type":"link","href":"/fortran/complex","label":"Complex number","docId":"complex","unlisted":false},{"type":"link","href":"/fortran/recursion","label":"Recursion","docId":"recursion","unlisted":false},{"type":"link","href":"/fortran/types","label":"Custom types","docId":"types","unlisted":false},{"type":"link","href":"/fortran/pointer","label":"Pointer","docId":"pointer","unlisted":false},{"type":"link","href":"/fortran/file-io","label":"File I/O","docId":"file-io","unlisted":false},{"type":"category","label":"Coding practice","collapsed":true,"items":[{"type":"link","href":"/fortran/coding-practice/swap","label":"Swap two numbers","docId":"coding-practice/swap","unlisted":false},{"type":"link","href":"/fortran/coding-practice/abs-path","label":"Absolute path","docId":"coding-practice/abs-path","unlisted":false},{"type":"link","href":"/fortran/coding-practice/hypotenuse","label":"Calculate hypotenuse","docId":"coding-practice/hypotenuse","unlisted":false},{"type":"link","href":"/fortran/coding-practice/integration","label":"Numerical integration","docId":"coding-practice/integration","unlisted":false},{"type":"link","href":"/fortran/coding-practice/haversine","label":"Haversine formula","docId":"coding-practice/haversine","unlisted":false},{"type":"link","href":"/fortran/coding-practice/inner-product","label":"Inner product","docId":"coding-practice/inner-product","unlisted":false},{"type":"link","href":"/fortran/coding-practice/monte-carlo-pi","label":"Monte Carlo method","docId":"coding-practice/monte-carlo-pi","unlisted":false},{"type":"link","href":"/fortran/coding-practice/monte-carlo-integration","label":"Monte Carlo integration","docId":"coding-practice/monte-carlo-integration","unlisted":false},{"type":"link","href":"/fortran/coding-practice/time","label":"Time","docId":"coding-practice/time","unlisted":false},{"type":"link","href":"/fortran/coding-practice/arg-parsing","label":"Argument parsing","docId":"coding-practice/arg-parsing","unlisted":false},{"type":"link","href":"/fortran/coding-practice/exec-command","label":"External command","docId":"coding-practice/exec-command","unlisted":false},{"type":"link","href":"/fortran/coding-practice/blas","label":"BLAS","docId":"coding-practice/blas","unlisted":false},{"type":"link","href":"/fortran/coding-practice/mpi","label":"MPI Basics","docId":"coding-practice/mpi","unlisted":false}],"collapsible":true,"href":"/fortran/category/coding-practice"},{"type":"link","href":"/fortran/resources","label":"Resources","docId":"resources","unlisted":false},{"type":"link","href":"/fortran/license","label":"License","docId":"license","unlisted":false}]},"docs":{"array":{"id":"array","title":"Array and Matrix","description":"There is intrinsic SIZE function to determine the length of a vector, SIZE(vec).","sidebar":"docs"},"basics":{"id":"basics","title":"Basics","description":"We will learn by doing. Let us start by writing a simple program that asks for","sidebar":"docs"},"coding-practice/abs-path":{"id":"coding-practice/abs-path","title":"Function: Get absolute path","description":"Here is a function to convert filenames to their absolute path:","sidebar":"docs"},"coding-practice/arg-parsing":{"id":"coding-practice/arg-parsing","title":"Parsing command-line arguments","description":"We will use commandargumentcount and getcommandargument to parse command","sidebar":"docs"},"coding-practice/blas":{"id":"coding-practice/blas","title":"Basic Linear Algebra Subprograms","description":"Install BLAS and [LAPACK](","sidebar":"docs"},"coding-practice/coarray":{"id":"coding-practice/coarray","title":"Coarray","description":"Resources"},"coding-practice/exec-command":{"id":"coding-practice/exec-command","title":"Execute system/external command","description":"We can call executecommandline to execute external commands in a FORTRAN","sidebar":"docs"},"coding-practice/haversine":{"id":"coding-practice/haversine","title":"Haversine formula","description":"Determine the distance between two places on earth given latitude and longitude.","sidebar":"docs"},"coding-practice/hypotenuse":{"id":"coding-practice/hypotenuse","title":"Calculate hypotenuse: example of subroutine","description":"Hypotenuse can be calculated using following formula:","sidebar":"docs"},"coding-practice/inner-product":{"id":"coding-practice/inner-product","title":"Inner product: dynamic array allocation","description":"Example of dynamic array allocation:","sidebar":"docs"},"coding-practice/integration":{"id":"coding-practice/integration","title":"Numerical integration: Trapezoidal method","description":"We will calculate the area under the curve $f(x)$ within the bounds $x=a$ and","sidebar":"docs"},"coding-practice/monte-carlo-integration":{"id":"coding-practice/monte-carlo-integration","title":"Area under the curve by Monte Carlo method","description":"","sidebar":"docs"},"coding-practice/monte-carlo-pi":{"id":"coding-practice/monte-carlo-pi","title":"Determine value of pi by Monte Carlo method","description":"We will approximate value of $\\\\pi$ by Monte Carlo method. We will generate","sidebar":"docs"},"coding-practice/mpi":{"id":"coding-practice/mpi","title":"Message Passing Interface (MPI) Basics","description":"MPI Hello World","sidebar":"docs"},"coding-practice/swap":{"id":"coding-practice/swap","title":"Swap two numbers","description":"Subroutine to swap two integers:","sidebar":"docs"},"coding-practice/time":{"id":"coding-practice/time","title":"Time","description":"Following example uses dateandtime and cpu_time to find current date and","sidebar":"docs"},"complex":{"id":"complex","title":"Complex number","description":"Basic usage of complex number in FORTRAN program.","sidebar":"docs"},"control":{"id":"control","title":"Logical expression and control","description":"Operators | Meaning","sidebar":"docs"},"file-io":{"id":"file-io","title":"File Input/Output","description":"Here we will generate some data and write it to a file:","sidebar":"docs"},"license":{"id":"license","title":"License","description":"CC-BY","sidebar":"docs"},"loop":{"id":"loop","title":"Loop","description":"DO Loop","sidebar":"docs"},"modules":{"id":"modules","title":"Modules","description":"Large programs can be organized in separate modules and procedures. Here is an","sidebar":"docs"},"pointer":{"id":"pointer","title":"Pointer","description":"Pointer in FORTRAN is an alias to a variable or procedure.","sidebar":"docs"},"procedures":{"id":"procedures","title":"Procedures","description":"There are two types of procedures in Fortran: subroutines and functions. All","sidebar":"docs"},"recursion":{"id":"recursion","title":"Recursion","description":"Ordinary FORTRAN procedures (subroutine and function) are not recursive, i.e.,","sidebar":"docs"},"resources":{"id":"resources","title":"Resources","description":"-  Fortran Programming Manual by Tanja van Mourik","sidebar":"docs"},"setup":{"id":"setup","title":"Setting up Fortran","description":"FORTRAN is optimized for high performance scientific computing. I will be","sidebar":"docs"},"types":{"id":"types","title":"Custom types","description":"Custom data types","sidebar":"docs"}}}}')}}]);