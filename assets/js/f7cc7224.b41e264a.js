"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([[210],{9345:(n,a,e)=>{e.r(a),e.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>g,toc:()=>u});var r=e(7462),t=(e(7294),e(3905)),m=e(614);const o='PROGRAM MAIN\n    IMPLICIT NONE\n    INTEGER no_of_commands, i\n    CHARACTER(LEN=32) :: arg\n    REAL :: sum = 0.0, tmp\n\n    no_of_commands = command_argument_count()\n\n    PRINT *, "Number of arguments = ", no_of_commands\n\n    IF (no_of_commands < 2) THEN\n        PRINT "(a,/,a)", "This program needs at least 2 arguments.", &\n                 "Usage: program 4 3"\n        STOP\n    END IF\n\n    DO i = 1, no_of_commands\n        CALL get_command_argument(i, arg)\n        ! if single argument is expected, use get_command(arg)\n        ! IF (LEN_TRIM(arg) == 0) EXIT ! not required here\n\n        arg = TRIM(arg)\n        READ(arg,*) tmp ! read strings as real\n\n        sum = sum + tmp\n    END DO\n\n    PRINT *, "Total = ", sum\nEND\n',s={title:"Parsing command-line arguments",sidebar_label:"Argument parsing"},i=void 0,g={unversionedId:"arg-parsing",id:"arg-parsing",title:"Parsing command-line arguments",description:"We will use commandargumentcount and getcommandargument to parse command",source:"@site/docs/arg-parsing.mdx",sourceDirName:".",slug:"/arg-parsing",permalink:"/fortran/arg-parsing",draft:!1,editUrl:"https://github.com/pranabdas/fortran/blob/main/docs/arg-parsing.mdx",tags:[],version:"current",frontMatter:{title:"Parsing command-line arguments",sidebar_label:"Argument parsing"},sidebar:"docs",previous:{title:"Time",permalink:"/fortran/time"},next:{title:"External command",permalink:"/fortran/exec-command"}},d={},u=[],c={toc:u},p="wrapper";function l(n){let{components:a,...e}=n;return(0,t.kt)(p,(0,r.Z)({},c,e,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"We will use ",(0,t.kt)("inlineCode",{parentName:"p"},"command_argument_count")," and ",(0,t.kt)("inlineCode",{parentName:"p"},"get_command_argument")," to parse command\nline arguments:"),(0,t.kt)(m.Z,{language:"fortran",title:"src/26_arg_parsing.f90",showLineNumbers:!0,mdxType:"CodeBlock"},o))}l.isMDXComponent=!0}}]);