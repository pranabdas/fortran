"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([["486"],{343:function(t,a,n){n.r(a),n.d(a,{frontMatter:()=>s,toc:()=>h,default:()=>l,metadata:()=>e,assets:()=>c,contentTitle:()=>o});var e=JSON.parse('{"id":"coding-practice/abs-path","title":"Function: Get absolute path","description":"Here is a function to convert filenames to their absolute path:","source":"@site/docs/coding-practice/02-abs-path.mdx","sourceDirName":"coding-practice","slug":"/coding-practice/abs-path","permalink":"/fortran/coding-practice/abs-path","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/fortran/blob/main/docs/coding-practice/02-abs-path.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Function: Get absolute path","sidebar_label":"Absolute path"},"sidebar":"docs","previous":{"title":"Swap two numbers","permalink":"/fortran/coding-practice/swap"},"next":{"title":"Calculate hypotenuse","permalink":"/fortran/coding-practice/hypotenuse"}}'),p=n(4848),i=n(4429),r=n(464);let s={title:"Function: Get absolute path",sidebar_label:"Absolute path"},o,c={},h=[];function u(t){let a={p:"p",...(0,i.R)(),...t.components};return(0,p.jsxs)(p.Fragment,{children:[(0,p.jsx)(a.p,{children:"Here is a function to convert filenames to their absolute path:"}),"\n","\n",(0,p.jsx)(r.A,{language:"fortran",title:"src/15_get_abs_path.f90",showLineNumbers:!0,children:"PROGRAM print_abs_path\n  IMPLICIT NONE\n\n  CHARACTER(LEN=128) :: input_path, abs_path, get_abs_path\n\n  PRINT \"(a,$)\", 'Enter file name: '\n  READ (*,\"(a128)\") input_path\n\n  abs_path = get_abs_path(input_path)\n  PRINT *, 'Absolute PATH: ', abs_path\nEND PROGRAM print_abs_path\n\nCHARACTER(LEN=128) FUNCTION get_abs_path(input_path)\n  IMPLICIT NONE\n\n  CHARACTER(LEN=128), INTENT(IN) :: input_path\n  CHARACTER(LEN=128) :: PREFIX\n\n  IF (input_path(1:1) == '/' ) THEN\n    get_abs_path = input_path\n\n  ELSE IF (input_path(1:2) == '~/' ) THEN\n    CALL GETENV('HOME', PREFIX)\n    get_abs_path = PREFIX(:LNBLNK(PREFIX)) // input_path(2:LNBLNK(input_path))\n\n  ELSE\n    CALL GETCWD(PREFIX)\n    get_abs_path = PREFIX(:LNBLNK(PREFIX)) // '/' // input_path(:LNBLNK(input_path))\n  ENDIF\n\n  RETURN\nEND FUNCTION get_abs_path\n"})]})}function l(t={}){let{wrapper:a}={...(0,i.R)(),...t.components};return a?(0,p.jsx)(a,{...t,children:(0,p.jsx)(u,{...t})}):u(t)}}}]);