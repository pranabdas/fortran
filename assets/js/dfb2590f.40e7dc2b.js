"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([[318],{9890:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return m},default:function(){return N},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=n(8066),o=["components"],p={title:"Basics"},m=void 0,s={unversionedId:"basics",id:"basics",title:"Basics",description:"We will learn by doing. Let us start by writing a simple program that asks for",source:"@site/docs/basics.mdx",sourceDirName:".",slug:"/basics",permalink:"/fortran/basics",editUrl:"https://github.com/pranabdas/fortran/blob/main/docs/basics.mdx",tags:[],version:"current",frontMatter:{title:"Basics"},sidebar:"docs",previous:{title:"Setup",permalink:"/fortran/"},next:{title:"Array and Matrix",permalink:"/fortran/array"}},d={},c=[{value:"Names",id:"names",level:3},{value:"Types",id:"types",level:3},{value:"Variables",id:"variables",level:3},{value:"Constants",id:"constants",level:3},{value:"Implicit typing",id:"implicit-typing",level:3},{value:"Intrinsic functions",id:"intrinsic-functions",level:3},{value:"Mathematical functions",id:"mathematical-functions",level:3}],u={toc:c};function N(t){var e=t.components,n=(0,r.Z)(t,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We will learn by doing. Let us start by writing a simple program that asks for\nsome user input, performs some arithmetic operations, and returns a result."),(0,i.kt)(l.Z,{language:"fortran",title:"src/01_add.f90",mdxType:"CodeBlock"},'! Program : Add two integer numbers\n\nPROGRAM add\n  IMPLICIT NONE\n\n  INTEGER :: a, b, output\n\n  PRINT *, "Input a ="\n  READ *, a\n\n  PRINT *, "Input b ="\n  READ *, b\n\n  output = a + b\n  PRINT*, "Output: ", a, "+", b, "=", output\nEND PROGRAM add\n'),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Variable names and keywords in FORTRAN are not case sensitive. You can write\nkeywords in both lowercase or uppercase. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"implicit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"IMPLICIT"),"\nare the same. Older, f77 specification only allowed uppercase letters.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"PROGRAM name and file name are not related."))))),(0,i.kt)("p",null,"We store the above code in a file named: ",(0,i.kt)("inlineCode",{parentName:"p"},"01_add.f90"),". We compile and execute\nthe code as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gfortran 01_add.f90\n./a.out\n")),(0,i.kt)("p",null,"Now let's write another simple program that converts centimeter to inches:"),(0,i.kt)(l.Z,{language:"fortran",title:"src/02_cm2inch.f90",mdxType:"CodeBlock"},'! Program : Converting centimeter to inches\n\nPROGRAM cm2inch\n  IMPLICIT NONE\n\n  REAL :: cm, inch\n  PRINT "(a,$)", "Enter length in centimeter = "\n  READ *, cm\n\n  inch = cm / 2.54\n  PRINT *, "Length in inches = ", inch\nEND PROGRAM cm2inch\n'),(0,i.kt)("p",null,"Calculate the circumference of a circle given the diameter:"),(0,i.kt)(l.Z,{language:"fortran",title:"src/03_circ.f90",mdxType:"CodeBlock"},'! Program : Calculate the circumference of a circle given the radius.\n\nPROGRAM circ\n  IMPLICIT NONE\n\n  REAL :: r, circum\n  REAL, PARAMETER :: pi = 3.14159\n\n  WRITE(*, "(a)", advance=\'NO\') "Enter radius of the circle: "\n  READ *, r\n\n  circum = 2 * pi * r\n  PRINT *, "Circumference of the circle = ", circum\nEND PROGRAM circ\n'),(0,i.kt)("p",null,"Formatting output:"),(0,i.kt)(l.Z,{language:"fortran",title:"src/04_format.f90",mdxType:"CodeBlock"},"! Program : Formatting output in Fortran\n\nPROGRAM format\n  IMPLICIT NONE\n\n  INTEGER :: no_of_students = 25\n  REAL :: result1, result2\n\n  result1 = SIN(1.23)\n  result2 = 1.234728 * EXP(12.0)\n\n  PRINT '(i4)', no_of_students    ! Interger with 4 spaces for it\n  PRINT '(f6.4)', result1         ! Real number with 6 spaces of\n                                  ! which 4 for the decimal part\n  PRINT '(e8.2)', result2         ! exponential with 2 spaces for\n                                  ! decimal part\nEND PROGRAM format\n"),(0,i.kt)("p",null,"Example outputs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-fortran"},'WRITE(*, "(I4)") 1234\n1234\n\nWRITE(*, "(I8)") 1234\n    1234\n\nWRITE(*, "(I8.6)") 1234\n  001234\n\nWRITE(*, "(F8.4)") pi\n  3.1416\n\nWRITE(*, "(E12.4)") pi\n  0.3142E+01\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"A comment starts with ",(0,i.kt)("inlineCode",{parentName:"p"},"!"),". The continuation of a single statement to the next\nline is done by ",(0,i.kt)("inlineCode",{parentName:"p"},"&")," at the end of previous line. If you need to break a very\nlong character string, use the concatenation operator ",(0,i.kt)("inlineCode",{parentName:"p"},"//"),"."),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-fortran"},'PRINT *, "My name is " // &\n  "Pranab."\n')),(0,i.kt)("p",{parentName:"div"},"A single statement can be at max 256 lines long. Also, you can separate multiple\nstatements in a line with semicolon (",(0,i.kt)("inlineCode",{parentName:"p"},";"),")."))),(0,i.kt)("h3",{id:"names"},"Names"),(0,i.kt)("p",null,"The names must not be longer than 63 characters, must be composed of\nalphanumeric characters and underscores, first character must be a letter. Names\nare case insensitive."),(0,i.kt)("h3",{id:"types"},"Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Integer (example: ",(0,i.kt)("inlineCode",{parentName:"li"},"-2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"10"),")"),(0,i.kt)("li",{parentName:"ul"},"Real (example: ",(0,i.kt)("inlineCode",{parentName:"li"},"3.14"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"1.2E2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"2.3D-2"),". ",(0,i.kt)("inlineCode",{parentName:"li"},"D")," indicates double precision.)"),(0,i.kt)("li",{parentName:"ul"},"Complex (example: ",(0,i.kt)("inlineCode",{parentName:"li"},"2.0 - 1.5i"),")"),(0,i.kt)("li",{parentName:"ul"},"Logical (",(0,i.kt)("inlineCode",{parentName:"li"},".true."),", ",(0,i.kt)("inlineCode",{parentName:"li"},".false."),")"),(0,i.kt)("li",{parentName:"ul"},"Character: The length of a string can be specified by ",(0,i.kt)("inlineCode",{parentName:"li"},"len"),".")),(0,i.kt)("h3",{id:"variables"},"Variables"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-fortran"},"integer :: no_of_students\nreal :: radius, circumference\ncomplex :: cx\nlogical :: done\ncharacter(len=20) :: name\n")),(0,i.kt)("h3",{id:"constants"},"Constants"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-fortran"},"real, parameter :: pi = 3.14159\n")),(0,i.kt)("p",null,"Setting double precision:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-fortran"},"REAL(KIND=KIND(0.0D0)), PARAMETER :: pi =  4 * ATAN(1.0D0)\n\n! or\nREAL(KIND=SELECTED_REAL_KIND(12)), PARAMETER :: pi =  4 * ATAN(1.0D0)\n\n! type conversion\nREAL(KIND=KIND(0.0D0)) :: x\nINTEGER :: y\ny = 1\nx = REAL(y, KIND=KIND(0.0D0))\n\n! integer with 12 significant digits\nINTEGER(KIND=SELECTED_INT_KIND(12)) :: large_int\n")),(0,i.kt)("h3",{id:"implicit-typing"},"Implicit typing"),(0,i.kt)("p",null,"In Fortran variables need not to be declared beforehand, but this practice\nshould be avoided by ",(0,i.kt)("inlineCode",{parentName:"p"},"IMPLICIT NONE")," at the top of program. If a variable is not\ndeclared, the first letter of its name determines its type. If the name starts\nwith i, j, k, l, m, n, it is considered integer, otherwise real."),(0,i.kt)("h3",{id:"intrinsic-functions"},"Intrinsic functions"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Functions"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"abs(x)"),(0,i.kt)("td",{parentName:"tr",align:null},"absolute value of a numerical argument")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"complx(x, y)"),(0,i.kt)("td",{parentName:"tr",align:null},"converts to complex")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"floor(x)"),(0,i.kt)("td",{parentName:"tr",align:null},"greatest integer \u2264 x ",(0,i.kt)("inlineCode",{parentName:"td"},"floor(3.2)=3"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"floor(-4.9)=-5"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"int(x)"),(0,i.kt)("td",{parentName:"tr",align:null},"converts to integer. ",(0,i.kt)("inlineCode",{parentName:"td"},"int(-4.9)=-4"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"int(0.2)=0"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"int(3.3)=3"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"nint(x ","[, ikind]",")"),(0,i.kt)("td",{parentName:"tr",align:null},"rounds to nearest integer. Optional ",(0,i.kt)("inlineCode",{parentName:"td"},"ikind")," for precision")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"real(x ","[, ikind]",")"),(0,i.kt)("td",{parentName:"tr",align:null},"converts to real")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"mod(a, p)"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"a - int(a/p)*p"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"modulo(a,p)"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"a - floor(a/p)*p"))))),(0,i.kt)("h3",{id:"mathematical-functions"},"Mathematical functions"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Functions"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sin"),(0,i.kt)("td",{parentName:"tr",align:null},"sine function")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"asin"),(0,i.kt)("td",{parentName:"tr",align:null},"inverse sine")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sinh"),(0,i.kt)("td",{parentName:"tr",align:null},"sine hyperbolic")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"cos"),(0,i.kt)("td",{parentName:"tr",align:null},"cosine function")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"acos"),(0,i.kt)("td",{parentName:"tr",align:null},"inverse cosine")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"cosh"),(0,i.kt)("td",{parentName:"tr",align:null},"cos hyperbolic")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"tan"),(0,i.kt)("td",{parentName:"tr",align:null},"tangent function")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"atan"),(0,i.kt)("td",{parentName:"tr",align:null},"inverse tan")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"atan2"),(0,i.kt)("td",{parentName:"tr",align:null},"inverse tangent for complex numbers")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"tanh"),(0,i.kt)("td",{parentName:"tr",align:null},"tan hyperbolic")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sqrt"),(0,i.kt)("td",{parentName:"tr",align:null},"square root")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"exp"),(0,i.kt)("td",{parentName:"tr",align:null},"exponential")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"log"),(0,i.kt)("td",{parentName:"tr",align:null},"natural logarithm")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"log10"),(0,i.kt)("td",{parentName:"tr",align:null},"common logarithm")))))}N.isMDXComponent=!0}}]);