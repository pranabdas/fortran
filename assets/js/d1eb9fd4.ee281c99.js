"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([[328],{3307:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var o=a(7462),t=(a(7294),a(3905)),r=a(814);const l={title:"Modules"},s=void 0,i={unversionedId:"modules",id:"modules",title:"Modules",description:"Large programs can be organized in separate modules and procedures. Here is an",source:"@site/docs/modules.mdx",sourceDirName:".",slug:"/modules",permalink:"/fortran/modules",draft:!1,editUrl:"https://github.com/pranabdas/fortran/blob/main/docs/modules.mdx",tags:[],version:"current",frontMatter:{title:"Modules"},sidebar:"docs",previous:{title:"Loop",permalink:"/fortran/loop"},next:{title:"Procedures",permalink:"/fortran/procedures"}},d={},p=[{value:"USE keyword",id:"use-keyword",level:2}],m={toc:p};function u(e){let{components:n,...a}=e;return(0,t.kt)("wrapper",(0,o.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Large programs can be organized in separate modules and procedures. Here is an\nexample. We store various mathematical and physical constants in a module named\n",(0,t.kt)("inlineCode",{parentName:"p"},"constants_module"),"."),(0,t.kt)(r.Z,{language:"fortran",title:"src/11_const_module.f90",showLineNumbers:!0,mdxType:"CodeBlock"},"MODULE const_module\n  IMPLICIT none\n  PRIVATE\n\n  REAL, PUBLIC, PARAMETER :: pi = 3.14159265\n  REAL, PUBLIC, PARAMETER :: e  = 2.71828182\n\nEND MODULE const_module\n"),(0,t.kt)("p",null,"Now we write a program that uses the above module:"),(0,t.kt)(r.Z,{language:"fortran",title:"src/11_circ_area.f90",showLineNumbers:!0,mdxType:"CodeBlock"},'PROGRAM circ_area\n  USE const_module\n  \n  IMPLICIT none\n\n  REAL :: rad = 5.0, area\n\n  area = pi*rad**2\n\n  PRINT *, "Area = ", area\nEND PROGRAM circ_area\n'),(0,t.kt)("p",null,"The ",(0,t.kt)("inlineCode",{parentName:"p"},"PRIVATE")," keyword makes sure everything is private otherwise declared as\n",(0,t.kt)("inlineCode",{parentName:"p"},"PUBLIC"),". Private variables are accessible only to the module, while public\nvariables are accessible to the programs that uses it. There is also ",(0,t.kt)("inlineCode",{parentName:"p"},"PROTECTED"),"\nkeyword, which allows the variable to be accessible but the value cannot be\nmodified. Compile and run our module and program:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"gfortran -c 11_const_module.f90\ngfortran 11_circ_area.f90 11_const_module.o\n./a.out\n")),(0,t.kt)("admonition",{type:"note"},(0,t.kt)("p",{parentName:"admonition"},"Modules need to be compiled before the program that uses it. If both are placed\nin the same source file, the module should come before the program. Once the\nmodule is compiled, it will create ",(0,t.kt)("inlineCode",{parentName:"p"},".o")," and ",(0,t.kt)("inlineCode",{parentName:"p"},".mod")," files. When we compile the\nprogram, we only need to provide the ",(0,t.kt)("inlineCode",{parentName:"p"},".o")," file for linking, the compiler will\nfind the ",(0,t.kt)("inlineCode",{parentName:"p"},".mod")," files. If the files are on a different directory, specify via\n",(0,t.kt)("inlineCode",{parentName:"p"},"-I<dir>")," option."),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"gfortran -I./ 11_circ_area.f90\n"))),(0,t.kt)("h2",{id:"use-keyword"},"USE keyword"),(0,t.kt)("p",null,"Rename a variable:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-fortran"},"use const_module, math_pi => pi\n")),(0,t.kt)("p",null,"Use only certain variables:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-fortran"},"use const_module, only : pi\nuse const_module, only : pi, e\n")),(0,t.kt)("p",null,"Last command is same as:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-fortran"},"use const_module, only : pi\nuse const_module, only : e\n")),(0,t.kt)("p",null,"Use pi and rename e:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-fortran"},"use const_module, only : pi, log_base => e\n")))}u.isMDXComponent=!0}}]);