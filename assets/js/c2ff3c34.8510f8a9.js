"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([["852"],{8642:function(n,a,e){e.r(a),e.d(a,{frontMatter:()=>s,toc:()=>g,default:()=>l,metadata:()=>r,assets:()=>c,contentTitle:()=>m});var r=JSON.parse('{"id":"coding-practice/arg-parsing","title":"Parsing command-line arguments","description":"We will use commandargumentcount and getcommandargument to parse command","source":"@site/docs/coding-practice/10-arg-parsing.mdx","sourceDirName":"coding-practice","slug":"/coding-practice/arg-parsing","permalink":"/fortran/coding-practice/arg-parsing","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/fortran/blob/main/docs/coding-practice/10-arg-parsing.mdx","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Parsing command-line arguments","sidebar_label":"Argument parsing"},"sidebar":"docs","previous":{"title":"Time","permalink":"/fortran/coding-practice/time"},"next":{"title":"External command","permalink":"/fortran/coding-practice/exec-command"}}'),t=e(4848),i=e(4429),o=e(464);let s={title:"Parsing command-line arguments",sidebar_label:"Argument parsing"},m,c={},g=[];function d(n){let a={code:"code",p:"p",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a.p,{children:["We will use ",(0,t.jsx)(a.code,{children:"command_argument_count"})," and ",(0,t.jsx)(a.code,{children:"get_command_argument"})," to parse command\nline arguments:"]}),"\n","\n",(0,t.jsx)(o.A,{language:"fortran",title:"src/26_arg_parsing.f90",showLineNumbers:!0,children:'PROGRAM MAIN\n    IMPLICIT NONE\n    INTEGER no_of_commands, i\n    CHARACTER(LEN=32) :: arg\n    REAL :: sum = 0.0, tmp\n\n    no_of_commands = command_argument_count()\n\n    PRINT *, "Number of arguments = ", no_of_commands\n\n    IF (no_of_commands < 2) THEN\n        PRINT "(a,/,a)", "This program needs at least 2 arguments.", &\n                 "Usage: program 4 3"\n        STOP\n    END IF\n\n    DO i = 1, no_of_commands\n        CALL get_command_argument(i, arg)\n        ! if single argument is expected, use get_command(arg)\n        ! IF (LEN_TRIM(arg) == 0) EXIT ! not required here\n\n        arg = TRIM(arg)\n        READ(arg,*) tmp ! read strings as real\n\n        sum = sum + tmp\n    END DO\n\n    PRINT *, "Total = ", sum\nEND\n'})]})}function l(n={}){let{wrapper:a}={...(0,i.R)(),...n.components};return a?(0,t.jsx)(a,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}}}]);