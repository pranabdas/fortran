"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([["400"],{9030:function(e,n,r){r.r(n),r.d(n,{default:()=>x,frontMatter:()=>l,metadata:()=>s,assets:()=>a,toc:()=>o,contentTitle:()=>d});var s=JSON.parse('{"id":"basics","title":"Basics","description":"We will learn by doing. Let us start by writing a simple program that asks for","source":"@site/docs/basics.mdx","sourceDirName":".","slug":"/basics","permalink":"/fortran/basics","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/fortran/blob/main/docs/basics.mdx","tags":[],"version":"current","frontMatter":{"title":"Basics"},"sidebar":"docs","previous":{"title":"Setup","permalink":"/fortran/"},"next":{"title":"Array and Matrix","permalink":"/fortran/array"}}'),i=r("5893"),t=r("65"),c=r("5056");let l={title:"Basics"},d=void 0,a={},o=[{value:"Names",id:"names",level:3},{value:"Types",id:"types",level:3},{value:"Variables",id:"variables",level:3},{value:"Constants",id:"constants",level:3},{value:"KIND type parameter",id:"kind-type-parameter",level:3},{value:"Implicit typing",id:"implicit-typing",level:3},{value:"Intrinsic functions",id:"intrinsic-functions",level:3},{value:"Mathematical functions",id:"mathematical-functions",level:3},{value:"Reading multiple inputs",id:"reading-multiple-inputs",level:3},{value:"Formatting output",id:"formatting-output",level:3}];function h(e){let n={admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"We will learn by doing. Let us start by writing a simple program that asks for\nsome user input, performs some arithmetic operations, and returns a result."}),"\n","\n",(0,i.jsx)(c.Z,{language:"fortran",title:"src/01_add.f90",showLineNumbers:!0,children:'! Program : Add two integer numbers\n\nPROGRAM add\n  IMPLICIT NONE\n\n  INTEGER :: a, b, output\n\n  PRINT *, "Input a ="\n  READ *, a\n\n  PRINT *, "Input b ="\n  READ *, b\n\n  output = a + b\n  PRINT*, "Output: ", a, "+", b, "=", output\nEND PROGRAM add\n'}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Variable names and keywords in FORTRAN are not case sensitive. You can write\nkeywords in both lowercase or uppercase. For example, ",(0,i.jsx)(n.code,{children:"implicit"})," and ",(0,i.jsx)(n.code,{children:"IMPLICIT"}),"\nare the same. Older, f77 specification only allowed uppercase letters."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"PROGRAM name and file name are not related."}),"\n"]}),"\n"]})}),"\n",(0,i.jsxs)(n.p,{children:["We store the above code in a file named: ",(0,i.jsx)(n.code,{children:"01_add.f90"}),". We compile and execute\nthe code as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"gfortran 01_add.f90\n./a.out\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now let's write another simple program that converts centimeter to inches:"}),"\n","\n",(0,i.jsx)(c.Z,{language:"fortran",title:"src/02_cm2inch.f90",showLineNumbers:!0,children:'! Program : Converting centimeter to inches\n\nPROGRAM cm2inch\n  IMPLICIT NONE\n\n  REAL :: cm, inch\n  PRINT "(a,$)", "Enter length in centimeter = "\n  READ *, cm\n\n  inch = cm / 2.54\n  PRINT *, "Length in inches = ", inch\nEND PROGRAM cm2inch\n'}),"\n",(0,i.jsx)(n.p,{children:"Calculate the circumference of a circle given the diameter:"}),"\n","\n",(0,i.jsx)(c.Z,{language:"fortran",title:"src/03_circ.f90",showLineNumbers:!0,children:'! Program : Calculate the circumference of a circle given the radius.\n\nPROGRAM circ\n  IMPLICIT NONE\n\n  REAL :: r, circum\n  REAL, PARAMETER :: pi = 3.14159\n\n  WRITE(*, "(a)", advance=\'NO\') "Enter radius of the circle: "\n  READ *, r\n\n  circum = 2 * pi * r\n  PRINT *, "Circumference of the circle = ", circum\nEND PROGRAM circ\n'}),"\n",(0,i.jsx)(n.p,{children:"Formatting output:"}),"\n","\n",(0,i.jsx)(c.Z,{language:"fortran",title:"src/04_format.f90",showLineNumbers:!0,children:"! Program : Formatting output in Fortran\n\nPROGRAM format\n  IMPLICIT NONE\n\n  INTEGER :: no_of_students = 25\n  REAL :: result1, result2\n\n  result1 = SIN(1.23)\n  result2 = 1.234728 * EXP(12.0)\n\n  PRINT '(i4)', no_of_students    ! Interger with 4 spaces for it\n  PRINT '(f6.4)', result1         ! Real number with 6 spaces of\n                                  ! which 4 for the decimal part\n  PRINT '(e8.2)', result2         ! exponential with 2 spaces for\n                                  ! decimal part\nEND PROGRAM format\n"}),"\n",(0,i.jsx)(n.p,{children:"Example outputs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'WRITE(*, "(I4)") 1234\n1234\n\nWRITE(*, "(I8)") 1234\n    1234\n\nWRITE(*, "(I8.6)") 1234\n  001234\n\nWRITE(*, "(F8.4)") pi\n  3.1416\n\nWRITE(*, "(E12.4)") pi\n  0.3142E+01\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["A comment starts with ",(0,i.jsx)(n.code,{children:"!"}),". The continuation of a single statement to the next\nline is done by ",(0,i.jsx)(n.code,{children:"&"})," at the end of previous line. If you need to break a very\nlong character string, use the concatenation operator ",(0,i.jsx)(n.code,{children:"//"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PRINT *, "My name is " // &\n  "Pranab."\n'})}),(0,i.jsxs)(n.p,{children:["A single statement can be at max 256 lines long. Also, you can separate multiple\nstatements in a line with semicolon (",(0,i.jsx)(n.code,{children:";"}),")."]})]}),"\n",(0,i.jsx)(n.h3,{id:"names",children:"Names"}),"\n",(0,i.jsx)(n.p,{children:"The names must not be longer than 63 characters, must be composed of\nalphanumeric characters and underscores, first character must be a letter. Names\nare case insensitive."}),"\n",(0,i.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Integer (example: ",(0,i.jsx)(n.code,{children:"-2"}),", ",(0,i.jsx)(n.code,{children:"0"}),", ",(0,i.jsx)(n.code,{children:"10"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Real (example: ",(0,i.jsx)(n.code,{children:"3.14"}),", ",(0,i.jsx)(n.code,{children:"1.2E2"}),", ",(0,i.jsx)(n.code,{children:"2.3D-2"}),". ",(0,i.jsx)(n.code,{children:"D"})," indicates double precision.)"]}),"\n",(0,i.jsxs)(n.li,{children:["Complex (example: ",(0,i.jsx)(n.code,{children:"2.0 - 1.5i"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Logical (",(0,i.jsx)(n.code,{children:".true."}),", ",(0,i.jsx)(n.code,{children:".false."}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Character: The length of a string can be specified by ",(0,i.jsx)(n.code,{children:"len"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"integer :: no_of_students\nreal :: radius, circumference\ncomplex :: cx\nlogical :: done\ncharacter(len=20) :: name\n"})}),"\n",(0,i.jsx)(n.h3,{id:"constants",children:"Constants"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"real, parameter :: pi = 3.14159\n"})}),"\n",(0,i.jsx)(n.h3,{id:"kind-type-parameter",children:"KIND type parameter"}),"\n",(0,i.jsx)(n.p,{children:"The KIND type parameters supported by GNU Fortran for the primitive data types\nare:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"INTEGER:"})," 1, 2, 4, 8",(0,i.jsx)("sup",{children:"\u2020"}),", 16",(0,i.jsx)("sup",{children:"\u2020"})," (default 4",(0,i.jsx)("sup",{children:"\u2021"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"LOGICAL:"})," 1, 2, 4, 8",(0,i.jsx)("sup",{children:"\u2020"}),", 16",(0,i.jsx)("sup",{children:"\u2020"})," (default 4",(0,i.jsx)("sup",{children:"\u2021"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"REAL:"})," 4, 8, 10",(0,i.jsx)("sup",{children:"\u2020"}),", 16",(0,i.jsx)("sup",{children:"\u2020"})," (default 4",(0,i.jsx)("sup",{children:"\xa7"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"COMPLEX:"})," 4, 8, 10",(0,i.jsx)("sup",{children:"\u2020"}),", 16",(0,i.jsx)("sup",{children:"\u2020"})," (default 4",(0,i.jsx)("sup",{children:"\xa7"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"DOUBLE PRECISION:"})," 4, 8, 10",(0,i.jsx)("sup",{children:"\u2020"}),", 16",(0,i.jsx)("sup",{children:"\u2020"})," (default\n8",(0,i.jsx)("sup",{children:"\xa7"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CHARACTER:"})," 1, 4 (default 1)"]}),"\n",(0,i.jsxs)(n.p,{children:["\u2020 not available on all systems ",(0,i.jsx)("br",{}),"\n\u2021 unless ",(0,i.jsx)(n.code,{children:"-fdefault-integer-8"})," is used ",(0,i.jsx)("br",{}),"\n\xa7 unless ",(0,i.jsx)(n.code,{children:"-fdefault-real-8"})," is used ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"KIND"})," value matches the storage size in bytes, except for ",(0,i.jsx)(n.code,{children:"COMPLEX"})," where\nthe storage size is twice as much (or both real and imaginary part are a real\nvalue of the given size). It is recommended to use the ",(0,i.jsx)(n.code,{children:"SELECTED_CHAR_KIND"}),",\n",(0,i.jsx)(n.code,{children:"SELECTED_INT_KIND"})," and ",(0,i.jsx)(n.code,{children:"SELECTED_REAL_KIND"})," intrinsics or the ",(0,i.jsx)(n.code,{children:"INT8"}),", ",(0,i.jsx)(n.code,{children:"INT16"}),",\n",(0,i.jsx)(n.code,{children:"INT32"}),", ",(0,i.jsx)(n.code,{children:"INT64"}),", ",(0,i.jsx)(n.code,{children:"REAL32"}),", ",(0,i.jsx)(n.code,{children:"REAL64"}),", and ",(0,i.jsx)(n.code,{children:"REAL128"})," parameters."]}),"\n",(0,i.jsx)(n.p,{children:"Examples of setting double precision:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"REAL(KIND=KIND(0.0D0)), PARAMETER :: pi =  4 * ATAN(1.0D0)\n\n! or specify decimal precision and exponent range\nREAL(KIND=SELECTED_REAL_KIND(12, 200)), PARAMETER :: pi =  4 * ATAN(1.0D0)\nPRINT *, PRECISION(pi), RANGE(pi)\n\n! type conversion\nREAL(KIND=KIND(0.0D0)) :: x\nINTEGER :: y\ny = 1\nx = REAL(y, KIND=KIND(0.0D0))\n\n! integer with range -10^(12) to 10^(12)\nINTEGER(KIND=SELECTED_INT_KIND(12)) :: large_int\n"})}),"\n",(0,i.jsx)(n.h3,{id:"implicit-typing",children:"Implicit typing"}),"\n",(0,i.jsxs)(n.p,{children:["In Fortran variables need not to be declared beforehand, but this practice\nshould be avoided by ",(0,i.jsx)(n.code,{children:"IMPLICIT NONE"})," at the top of program. If a variable is not\ndeclared, the first letter of its name determines its type. If the name starts\nwith i, j, k, l, m, n, it is considered integer, otherwise real."]}),"\n",(0,i.jsx)(n.h3,{id:"intrinsic-functions",children:"Intrinsic functions"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Functions"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"abs(x)"}),(0,i.jsx)(n.td,{children:"absolute value of a numerical argument"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"complx(x, y)"}),(0,i.jsx)(n.td,{children:"converts to complex"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"floor(x)"}),(0,i.jsxs)(n.td,{children:["greatest integer \u2264 x ",(0,i.jsx)(n.code,{children:"floor(3.2)=3"}),", ",(0,i.jsx)(n.code,{children:"floor(-4.9)=-5"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int(x)"}),(0,i.jsxs)(n.td,{children:["converts to integer. ",(0,i.jsx)(n.code,{children:"int(-4.9)=-4"}),", ",(0,i.jsx)(n.code,{children:"int(0.2)=0"}),", ",(0,i.jsx)(n.code,{children:"int(3.3)=3"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"nint(x [, ikind])"}),(0,i.jsxs)(n.td,{children:["rounds to nearest integer. Optional ",(0,i.jsx)(n.code,{children:"ikind"})," for precision"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"real(x [, ikind])"}),(0,i.jsx)(n.td,{children:"converts to real"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"mod(a, p)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"a - int(a/p)*p"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"modulo(a,p)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"a - floor(a/p)*p"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"mathematical-functions",children:"Mathematical functions"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Functions"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sin"}),(0,i.jsx)(n.td,{children:"sine function"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"asin"}),(0,i.jsx)(n.td,{children:"inverse sine"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sinh"}),(0,i.jsx)(n.td,{children:"sine hyperbolic"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"cos"}),(0,i.jsx)(n.td,{children:"cosine function"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"acos"}),(0,i.jsx)(n.td,{children:"inverse cosine"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"cosh"}),(0,i.jsx)(n.td,{children:"cos hyperbolic"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"tan"}),(0,i.jsx)(n.td,{children:"tangent function"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"atan"}),(0,i.jsx)(n.td,{children:"inverse tan"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"atan2"}),(0,i.jsx)(n.td,{children:"inverse tangent for complex numbers"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"tanh"}),(0,i.jsx)(n.td,{children:"tan hyperbolic"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sqrt"}),(0,i.jsx)(n.td,{children:"square root"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"exp"}),(0,i.jsx)(n.td,{children:"exponential"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"log"}),(0,i.jsx)(n.td,{children:"natural logarithm"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"log10"}),(0,i.jsx)(n.td,{children:"common logarithm"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"reading-multiple-inputs",children:"Reading multiple inputs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTEGER :: M, N\n\nPRINT '(A,$)', \"Enter matrix dimensions: \"\n! inputs must be separated by at least one blank character or comma \nREAD *, M, N\n"})}),"\n",(0,i.jsx)(n.h3,{id:"formatting-output",children:"Formatting output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PRINT "(f5.1, es9.1, a, i4)", 3.5, 1.4e4, " and ", 12\nPRINT "(2(i4))", 12, 8 ! same as "(i4, i4)" or "(2i4)"\n\n! line breaks\nPRINT "(a, /, a)", "first line", "second line" ! two line breaks: 2/\n\n! tab editor, second number will be printed in the position 10-13\nPRINT "(i4, t10, i4)", 3, 5\n'})})]})}function x(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);