"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([[220],{4585:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"mpi","title":"Message Passing Interface (MPI) Basics","description":"MPI Hello World","source":"@site/docs/mpi.mdx","sourceDirName":".","slug":"/mpi","permalink":"/fortran/mpi","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/fortran/blob/main/docs/mpi.mdx","tags":[],"version":"current","frontMatter":{"title":"Message Passing Interface (MPI) Basics","sidebar_label":"MPI Basics"},"sidebar":"docs","previous":{"title":"BLAS","permalink":"/fortran/blas"},"next":{"title":"Resources","permalink":"/fortran/resources"}}');var o=s(4848),l=s(8453),i=s(1432);const a="PROGRAM hello_world_mpi\n    INCLUDE 'mpif.h'\n\n    INTEGER process_rank, size_of_cluster, ierror\n    CHARACTER* (MPI_MAX_PROCESSOR_NAME) processor_name\n\n    CALL MPI_INIT(ierror)\n    CALL MPI_COMM_SIZE(MPI_COMM_WORLD, size_of_cluster, ierror)\n    CALL MPI_COMM_RANK(MPI_COMM_WORLD, process_rank, ierror)\n    CALL MPI_GET_PROCESSOR_NAME(processor_name, namelen, ierr)\n\n    WRITE(*, 10) process_rank, size_of_cluster, processor_name\n10  FORMAT('Hello from process: ', I2, ' of', I2, ' on ', 20A)\n\n    CALL MPI_FINALIZE(ierror)\nEND PROGRAM\n",t={title:"Message Passing Interface (MPI) Basics",sidebar_label:"MPI Basics"},c=void 0,d={},p=[{value:"MPI Hello World",id:"mpi-hello-world",level:2},{value:"Resources",id:"resources",level:2}];function _(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"mpi-hello-world",children:"MPI Hello World"}),"\n","\n",(0,o.jsx)(i.A,{language:"fortran",title:"src/29_MPI_hello_world.f90",showLineNumbers:!0,children:a}),"\n",(0,o.jsx)(r.p,{children:"Compile the code:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"mpif90 29_MPI_hello_world.f90 -o 29_MPI_hello_world.out\n\n# if you are using intel compiler\nmpiifort 29_MPI_hello_world.f90 -o 29_MPI_hello_world.out\n"})}),"\n",(0,o.jsx)(r.p,{children:"Let's run on 4 processors:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"mpirun -np 4 ./29_MPI_hello_world.out\n"})}),"\n",(0,o.jsx)(r.h2,{id:"resources",children:"Resources"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"https://curc.readthedocs.io/en/latest/programming/MPI-Fortran.html",children:"https://curc.readthedocs.io/en/latest/programming/MPI-Fortran.html"})}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(_,{...e})}):_(e)}}}]);