"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([["118"],{6255:function(e,a,n){n.r(a),n.d(a,{default:()=>d,frontMatter:()=>l,metadata:()=>t,assets:()=>m,toc:()=>c,contentTitle:()=>o});var t=JSON.parse('{"id":"monte-carlo-pi","title":"Determine value of pi by Monte Carlo method","description":"We will approximate value of $\\\\pi$ by Monte Carlo method. We will generate","source":"@site/docs/monte-carlo-pi.mdx","sourceDirName":".","slug":"/monte-carlo-pi","permalink":"/fortran/monte-carlo-pi","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/fortran/blob/main/docs/monte-carlo-pi.mdx","tags":[],"version":"current","frontMatter":{"title":"Determine value of pi by Monte Carlo method","sidebar_label":"Monte Carlo method"},"sidebar":"docs","previous":{"title":"Inner product","permalink":"/fortran/inner-product"},"next":{"title":"Monte Carlo integration","permalink":"/fortran/monte-carlo-integration"}}'),s=n("5893"),r=n("65"),i=n("1705");let l={title:"Determine value of pi by Monte Carlo method",sidebar_label:"Monte Carlo method"},o=void 0,m={},c=[];function h(e){let a={annotation:"annotation",math:"math",mi:"mi",mrow:"mrow",p:"p",semantics:"semantics",span:"span",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a.p,{children:["We will approximate value of ",(0,s.jsxs)(a.span,{className:"katex",children:[(0,s.jsx)(a.span,{className:"katex-mathml",children:(0,s.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(a.semantics,{children:[(0,s.jsx)(a.mrow,{children:(0,s.jsx)(a.mi,{children:"\u03C0"})}),(0,s.jsx)(a.annotation,{encoding:"application/x-tex",children:"\\pi"})]})})}),(0,s.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(a.span,{className:"base",children:[(0,s.jsx)(a.span,{className:"strut",style:{height:"0.4306em"}}),(0,s.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03C0"})]})})]})," by Monte Carlo method. We will generate\nrandom number in a square of radius 2 unit; x = (-1, 1) and y = (-1, 1). We will\ncount how many points are inside the circle of radius 1 unit. Area of the square\n= 4 square unit, while the are of circle is ",(0,s.jsxs)(a.span,{className:"katex",children:[(0,s.jsx)(a.span,{className:"katex-mathml",children:(0,s.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(a.semantics,{children:[(0,s.jsx)(a.mrow,{children:(0,s.jsx)(a.mi,{children:"\u03C0"})}),(0,s.jsx)(a.annotation,{encoding:"application/x-tex",children:"\\pi"})]})})}),(0,s.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(a.span,{className:"base",children:[(0,s.jsx)(a.span,{className:"strut",style:{height:"0.4306em"}}),(0,s.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03C0"})]})})]})," (unit radius circle). Use this\nratio to approximate the value of ",(0,s.jsxs)(a.span,{className:"katex",children:[(0,s.jsx)(a.span,{className:"katex-mathml",children:(0,s.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(a.semantics,{children:[(0,s.jsx)(a.mrow,{children:(0,s.jsx)(a.mi,{children:"\u03C0"})}),(0,s.jsx)(a.annotation,{encoding:"application/x-tex",children:"\\pi"})]})})}),(0,s.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(a.span,{className:"base",children:[(0,s.jsx)(a.span,{className:"strut",style:{height:"0.4306em"}}),(0,s.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03C0"})]})})]}),"."]}),"\n","\n",(0,s.jsx)(i.Z,{language:"fortran",title:"src/20_monte_carlo_pi.f90",showLineNumbers:!0,children:'PROGRAM pi\n    IMPLICIT NONE\n    \n    INTEGER, PARAMETER :: iteration = 1000000\n    REAL :: x, y\n    REAL :: x_lo = -1.0\n    REAL :: x_hi = 1.0\n    REAL :: y_lo = -1.0\n    REAL :: y_hi = 1.0\n    INTEGER :: i, monte_area = 0\n\n    DO i = 1, iteration\n        CALL random_number(x)\n        CALL random_number(y)\n\n        x = x_lo + x * (x_hi - x_lo);\n        y = y_lo + y * (y_hi - y_lo);\n\n        IF (x * x + y * y < 1) THEN\n            monte_area = monte_area + 1;\n        END IF\n    END DO\n\n    PRINT *, "pi = ", 4.0 * monte_area / iteration\n\n    PRINT *, "relative error = ", abs(1.0 * monte_area / iteration &\n            - ATAN(1.0D0)) / ATAN(1.0D0)\n\nEND PROGRAM pi\n'})]})}function d(e={}){let{wrapper:a}={...(0,r.a)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);