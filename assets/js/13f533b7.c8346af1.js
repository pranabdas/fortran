"use strict";(self.webpackChunkfortran_programing=self.webpackChunkfortran_programing||[]).push([[578],{3098:(n,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>E,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var e=r(7462),o=(r(7294),r(3905)),a=r(614);const i="PROGRAM inner_product\n    IMPLICIT NONE\n\n    INTEGER length\n    REAL, DIMENSION(:), ALLOCATABLE :: a\n    REAL, DIMENSION(:), ALLOCATABLE :: b\n    INTEGER i\n    REAL :: sum = 0.0\n\n    PRINT \"(a,$)\", \"Enter length of vectors: \"\n    READ *, length\n\n    IF ( length < 1 ) then\n        PRINT *, \"Stopping: length must be positive definite.\"\n        STOP\n    END IF\n\n    ALLOCATE(a(length))\n    ALLOCATE(b(length))\n\n    PRINT *, \"Enter first array components:\"\n    DO i = 1, length\n        PRINT '(A,I4,A,$)', 'a[', i,'] = '\n        READ *, a(i)\n    END DO\n\n    PRINT *, \"Enter second array components:\"\n    DO i = 1, length\n        PRINT '(A,I4,A,$)', 'a[', i,'] = '\n        READ *, b(i)\n    END DO\n\n    DO i = 1, length\n        sum = sum + a(i) * b(i)\n    END DO\n\n    PRINT '(A,F8.4)', 'Inner product = ', sum\n\n    ! we can use in-built dot_product as well\n    PRINT '(A,F8.4)', \"Result using in-built dot_product = \", dot_product(a, b)\n\n    DEALLOCATE(a)\n    DEALLOCATE(b)\nEND PROGRAM inner_product\n",l={title:"Inner product: dynamic array allocation",sidebar_label:"Inner product"},c=void 0,d={unversionedId:"inner-product",id:"inner-product",title:"Inner product: dynamic array allocation",description:"Example of dynamic array allocation:",source:"@site/docs/inner-product.mdx",sourceDirName:".",slug:"/inner-product",permalink:"/fortran/inner-product",draft:!1,editUrl:"https://github.com/pranabdas/fortran/blob/main/docs/inner-product.mdx",tags:[],version:"current",frontMatter:{title:"Inner product: dynamic array allocation",sidebar_label:"Inner product"},sidebar:"docs",previous:{title:"Haversine formula",permalink:"/fortran/haversine"},next:{title:"Monte Carlo method",permalink:"/fortran/monte-carlo-pi"}},s={},u=[],p={toc:u},m="wrapper";function E(n){let{components:t,...r}=n;return(0,o.kt)(m,(0,e.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Example of dynamic array allocation:"),(0,o.kt)(a.Z,{language:"fortran",title:"src/19_inner_product.f90",showLineNumbers:!0,mdxType:"CodeBlock"},i))}E.isMDXComponent=!0}}]);